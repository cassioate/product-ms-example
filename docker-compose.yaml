version: '3.7'

networks:
  ms-networks:
    driver: bridge

services:
  product-ms:
    container_name: product-ms
    build:
      context: .
      dockerfile: ./Dockerfile
    mem_limit: 700m
    ports:
      - "9999:9999"
    environment: 
      spring.profiles.active: dev
      spring.datasource.url: jdbc:postgresql://db:5432/product-ms
      spring.datasource.username: postgres
      spring.datasource.password: '123456'
    networks:
      - ms-networks
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: db
    image: postgres
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: '123456'
      POSTGRES_DB: product-ms
    ports: 
    - "15432:5432"     
    networks: 
    - ms-networks
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5




  # rabbitmq:
  #   container_name: rabbitmq
  #   restart: always
  #   image: rabbitmq:3-management
  #   mem_limit: 700m
  #   ports:
  #     - 5672:5672
  #     - "15672:15672"
  #   networks:
  #     - currency-networks
  #   healthcheck:
  #     test: ["CMD-SHELL", "rabbitmq-diagnostics check_port_connectivity"]
  #     interval: 50s
  #     timeout: 5s
  #     retries: 5

  # api-gateway:
  #   container_name: api-gateway
  #   build: 
  #     dockerfile: apigateway
  #     context: ../api-gateway/
  #   mem_limit: 700m
  #   ports:
  #     - "8765:8765"
  #   environment:
  #   # aqui eu estou substituindo o "spring.config.import" que existe dentro do properties dessa aplicação (que é um variavel de ambiente),
  #   # mudando a palavra localhost para spring-cloud-config(nome do container), fazendo assim com que ele aponte para o localhost do container spring-cloud-config.
  #   # A TITULO DE INFORMAÇÃO, se eu substituir diretamente no application.properties o seguinte: "spring.config.import=optional:configserver:http://localhost:8888", ele também funcionaria, basta inserir "spring.config.import= "optional:configserver:http://microservices-2022-spring-cloud-config:8888".
  #     SPRING.CONFIG.IMPORT: configserver:http://spring-cloud-config:8888
  #     SPRING.ZIPKIN.BASEURL: http://zipkin:9411/
  #     #Se colocar o comando abaixo todo em maiusculo, o .properties nao interpreta corretamente e acaba nao reconhecendo o eureka, chamando assim sempre o localhost:8761.
  #     eureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka
  #     RABBIT_URI: amqp://guest:guest@rabbitmq:5672
  #     SPRING_RABBITMQ_HOST: rabbitmq
  #     SPRING_ZIPKIN_SENDER_TYPE: rabbit
  #   networks:
  #     - currency-networks
  #   healthcheck:
  #     test: wget http://localhost:8765/actuator/health || exit 1
  #     interval: 5s
  #     timeout: 30s
  #     retries: 25
  #   depends_on:
  #     spring-cloud-config:
  #       condition: service_healthy
  #     zipkin:
  #       condition: service_healthy
  #     eureka:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy

  # spring-cloud-config:
  #   container_name: spring-cloud-config
  #   build: 
  #     dockerfile: spring-cloud-config
  #     context: ../spring-cloud-config-server/
  #   mem_limit: 700m
  #   ports:
  #     - "8888:8888"
  #   environment:
  #     SPRING.ZIPKIN.BASEURL: http://zipkin:9411/
  #   networks:
  #     - currency-networks
  #   healthcheck:
  #     test: wget http://localhost:8888/actuator/health || exit 1
  #     interval: 5s
  #     timeout: 30s
  #     retries: 25
  #   depends_on:
  #     zipkin:
  #       condition: service_healthy

  # eureka:
  #   container_name: eureka
  #   build: 
  #     dockerfile: eureka
  #     context: ../eureka-server/
  #   mem_limit: 700m
  #   ports:
  #     - "8761:8761"
  #   restart: always
  #   environment:
  #   # aqui eu estou substituindo o "spring.config.import" que existe dentro do properties dessa aplicação (que é um variavel de ambiente),
  #   # mudando a palavra localhost para spring-cloud-config(nome do container), fazendo assim com que ele aponte para o localhost do container spring-cloud-config.
  #   # A TITULO DE INFORMAÇÃO, se eu substituir diretamente no application.properties o seguinte: "spring.config.import=optional:configserver:http://localhost:8888", ele também funcionaria, basta inserir "spring.config.import= "optional:configserver:http://microservices-2022-spring-cloud-config:8888".
  #     SPRING.CONFIG.IMPORT: configserver:http://spring-cloud-config:8888
  #     SPRING.ZIPKIN.BASEURL: http://zipkin:9411/
  #     RABBIT_URI: amqp://guest:guest@rabbitmq:5672
  #     SPRING_RABBITMQ_HOST: rabbitmq
  #     SPRING_ZIPKIN_SENDER_TYPE: rabbit
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   networks:
  #     - currency-networks
  #   healthcheck:
  #     test: wget http://localhost:8761 || exit 1
  #     interval: 5s
  #     timeout: 30s
  #     retries: 25
  #   depends_on:
  #     spring-cloud-config:
  #       condition: service_healthy
  #     zipkin:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy

  # currency-exchange-service:
  #   container_name: currency-exchange-service
  #   build: 
  #     dockerfile: currency-exchange
  #     context: ../currency-exchange-service/
  #   mem_limit: 700m
  #   ports:
  #     - "8000:8000"
  #   environment:
  #   # aqui eu estou substituindo o "spring.config.import" que existe dentro do properties dessa aplicação (que é um variavel de ambiente),
  #   # mudando a palavra localhost para spring-cloud-config(nome do container), fazendo assim com que ele aponte para o localhost do container spring-cloud-config.
  #   # A TITULO DE INFORMAÇÃO, se eu substituir diretamente no application.properties o seguinte: "spring.config.import=optional:configserver:http://localhost:8888", ele também funcionaria, basta inserir "spring.config.import= "optional:configserver:http://microservices-2022-spring-cloud-config:8888".
  #     SPRING.CONFIG.IMPORT: configserver:http://spring-cloud-config:8888
  #     EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka:8761/eureka
  #     SPRING.ZIPKIN.BASEURL: http://zipkin:9411/
  #     #Se colocar o comando abaixo todo em maiusculo, o .properties nao interpreta corretamente e acaba nao reconhecendo o eureka, chamando assim sempre o localhost:8761.
  #     eureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka
  #     RABBIT_URI: amqp://guest:guest@rabbitmq:5672
  #     SPRING_RABBITMQ_HOST: rabbitmq
  #     SPRING_ZIPKIN_SENDER_TYPE: rabbit
  #   networks:
  #     - currency-networks
  #   healthcheck:
  #     test: wget http://localhost:8000/actuator/health || exit 1
  #     interval: 5s
  #     timeout: 30s
  #     retries: 25
  #   depends_on:
  #     spring-cloud-config:
  #       condition: service_healthy
  #     zipkin:
  #       condition: service_healthy
  #     eureka:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy

  # currency-conversion-service:
  #   container_name: currency-conversion-service
  #   build: 
  #     dockerfile: currency-conversion
  #     context: ../currency-conversion-service/
  #   mem_limit: 700m
  #   ports:
  #     - "8100:8100"
  #   environment:
  #   # aqui eu estou substituindo o "spring.config.import" que existe dentro do properties dessa aplicação (que é um variavel de ambiente),
  #   # mudando a palavra localhost para spring-cloud-config(nome do container), fazendo assim com que ele aponte para o localhost do container spring-cloud-config.
  #   # A TITULO DE INFORMAÇÃO, se eu substituir diretamente no application.properties o seguinte: "spring.config.import=optional:configserver:http://localhost:8888", ele também funcionaria, basta inserir "spring.config.import= "optional:configserver:http://microservices-2022-spring-cloud-config:8888".
  #     SPRING.CONFIG.IMPORT: configserver:http://spring-cloud-config:8888
  #     SPRING.ZIPKIN.BASEURL: http://zipkin:9411/
  #     EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka:8761/eureka
  #     #Se colocar o comando abaixo todo em maiusculo, o .properties nao interpreta corretamente e acaba nao reconhecendo o eureka, chamando assim sempre o localhost:8761.
  #     eureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka
  #     RABBIT_URI: amqp://guest:guest@rabbitmq:5672
  #     SPRING_RABBITMQ_HOST: rabbitmq
  #     SPRING_ZIPKIN_SENDER_TYPE: rabbit
  #   networks:
  #     - currency-networks
  #   healthcheck:
  #     test: wget http://localhost:8100/actuator/health || exit 1
  #     interval: 5s
  #     timeout: 30s
  #     retries: 25
  #   depends_on:
  #     spring-cloud-config:
  #       condition: service_healthy
  #     zipkin:
  #       condition: service_healthy
  #     eureka:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy